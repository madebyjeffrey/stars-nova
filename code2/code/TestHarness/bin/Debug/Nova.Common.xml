<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nova.Common</name>
    </assembly>
    <members>
        <member name="T:Nova.Common.Converters.EnabledValueConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Nova.Common.EnabledValue"/>.
            </summary>
        </member>
        <member name="T:Nova.Common.Converters.EnvironmentToleranceConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Nova.Common.EnvironmentTolerance"/>.
            </summary>
        </member>
        <member name="T:Nova.Common.Converters.InstanceDescriptorConverter`1">
            <summary>
            Generic <see cref="T:System.ComponentModel.TypeConverter"/> for conversions to <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>.
            </summary>
        </member>
        <member name="M:Nova.Common.Converters.InstanceDescriptorConverter`1.ConvertToInstanceDescriptor(`0)">
            <summary>
            Called by <see cref="M:Nova.Common.Converters.InstanceDescriptorConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> to if converting to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>.
            </summary>
            <param name="value">Source value to be converted to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>.</param>
        </member>
        <member name="T:Nova.Common.Converters.ResourcesConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Nova.Common.Resources"/>.
            </summary>
        </member>
        <member name="T:Nova.Common.Converters.TechLevelConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Nova.Common.TechLevel"/>.
            </summary>
        </member>
        <member name="M:Nova.Common.Config.#ctor">
            <summary>
            Initialises a new instance of the Config class.
            </summary>
        </member>
        <member name="M:Nova.Common.Config.Restore">
            <summary>
            Restore the configuration settings from nova.conf
            </summary>
            <remarks>
            If there is no configuration file yet it will be created when the
            settings are saved for the first time.
            </remarks>
        </member>
        <member name="M:Nova.Common.Config.Save">
            <summary>
            Save the console persistent data.
            </summary>
        </member>
        <member name="P:Nova.Common.Config.Item(System.String)">
            <summary>
            Allow array type indexing of the Config.
            </summary>
            <param name="key">The particular setting to set or get.</param>
            <returns>The value of a setting.</returns>
        </member>
        <member name="M:Nova.Common.Config.Remove(System.String)">
            <summary>
            Remove a setting from the config file.
            </summary>
            <param name="setting">The key of the setting to remove.</param>
        </member>
        <member name="M:Nova.Common.Config.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nova.Common.CommandArguments.#ctor">
            <summary>
            Initializes a new instance of the CommandArguments class.
            </summary>
        </member>
        <member name="M:Nova.Common.CommandArguments.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the CommandArguments class.
            </summary>
            <param name="args">an array of string arguments, the format normally recived by a main function.</param>
        </member>
        <member name="M:Nova.Common.CommandArguments.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CommandArguments class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nova.Common.CommandArguments.Add(System.String)">
            <summary>
            Add an option without a value (single option flag).
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Nova.Common.CommandArguments.Add(System.String,System.String)">
            <summary>
            Add an option/argument pair.
            </summary>
            <param name="option">of the form -[:alphanum:], or as defined by CommandArguments.Option</param>
            <param name="argument">any string, such as a file name or race name</param>
        </member>
        <member name="M:Nova.Common.CommandArguments.Add(System.String,System.Int32)">
            <summary>
            Add an option/argument pair.
            </summary>
            <param name="option">of the form -[:alpha:], or as defined by CommandArguments.Option</param>
            <param name="argument">any integer argument, such as a turn year</param>
        </member>
        <member name="M:Nova.Common.CommandArguments.Contains(System.String)">
            <summary>
            Check if the CommandArgument(s) contains a particulat option.
            </summary>
            <param name="option">From CommandArgument.Option or of the form -[:alpha:]</param>
            <returns></returns>
        </member>
        <member name="P:Nova.Common.CommandArguments.Keys">
            <summary>
            A collection containing all the options.
            </summary>
        </member>
        <member name="P:Nova.Common.CommandArguments.Values">
            <summary>
            A collection containing all the arguments.
            </summary>
        </member>
        <member name="P:Nova.Common.CommandArguments.Item(System.String)">
            <summary>
            Allow array type indexing to a Command Argument.
            </summary>
            <param name="option">The option, as defined in CommandArguments.Option</param>
            <returns></returns>
        </member>
        <member name="M:Nova.Common.CommandArguments.ToString">
            <summary>
            Convert the CommandArguments to a single string as they would appear on the command line. Use for parsing the options and arguments to Process.Start()
            The arguments are returned in the same order that they were added.
            </summary>
            <returns>a single string representing the option and argument pairs</returns>
        </member>
        <member name="M:Nova.Common.CommandArguments.ToArray">
            <summary>
            Convert the CommandArguments to an array of strings as they would be recieved by a main function.
            The arguments are returned in the same order that they were added.
            </summary>
            <returns>an array of strings containing all the option and argument pairs</returns>
        </member>
        <member name="M:Nova.Common.CommandArguments.Parse(System.String)">
            <summary>
            WARNING : not implemented, will throw an exception.
            process one or more arguments passed as a string
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Nova.Common.CommandArguments.Parse(System.String[])">
            <summary>
            process one or more arguments passed as a string[]
            </summary>
            <param name="args">The aray of string arguments.</param>
        </member>
        <member name="M:Nova.Common.Defenses.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Nova.Common.Defenses.ComputeDefenseCoverage(Nova.Common.Star)">
            <summary>
            Determine the Defenses of a planet. Note: results are normalised so that
            100% = 1.0.
            </summary>
            <param name="star">The <see cref="T:Nova.Common.Star"/> to calculate defenses for.</param>
        </member>
        <member name="T:Nova.Common.Components.HullModule">
            <summary>
            The definition of the individual modules that make up a hull.
            These are the slots which define what components may be fitted.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.HullModule.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullModule.#ctor(Nova.Common.Components.HullModule)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">The existing <see cref="T:Nova.Common.Components.HullModule"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullModule.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so modules can be cloned.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullModule.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising Constructor from an xml node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> named "Module" within a "Property" node with Type=="Hull" 
            in a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullModule.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Serialise a <see cref="T:Nova.Common.Components.HullModule"/> to xml.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>an XmlElement representation of the HullModule</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.RaceComponents">
            <summary>
            RaceComponents: 
            Defines a colletion of Component objects using DictionaryBase to represent
            the components which are available to a given race.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.#ctor(Nova.Common.Race,Nova.Common.TechLevel)">
            ----------------------------------------------------------------------------
            <summary>
            Constructor. Generates the list of available components at construction for the 
            given race from AllComponents.
            </summary>
            <param name="newRace">The race these RaceComponents are available too.</param>
            <param name="newTech">The current tech level of the race.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.DetermineRaceComponents(Nova.Common.Race,Nova.Common.TechLevel)">
            ----------------------------------------------------------------------------
            <summary>
            Updates the collection for the given race and tech level.
            Note this does not remove any existing components from the collection.
            </summary>
            <param name="newRace"></param>
            <param name="newTech"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.Add(Nova.Common.Components.Component)">
            ----------------------------------------------------------------------------
            <summary>
            Add a componenent to the list of available components.
            </summary>
            <param name="newComponent">The Component to add.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.Add(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Add a Component to the list of available components.
            </summary>
            <param name="componentName">The Name of the Component to add.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.Remove(Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a Component from the race's RaceComponents list.
            </summary>
            <param name="componentToRemove">The Component to remove.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.Remove(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a Component from the race's RaceComponents list.
            </summary>
            <param name="componentToRemove">The Name of the Component to remove.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.RaceComponents.Contains(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Check if the race's RaceComponents contains a particular Component.
            </summary>
            <param name="componentName">The Name of the Component to look for.</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.RaceComponents.Item(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Allow array type indexing to an RaceComponents list.
            </summary>
            <param name="index">The Name of the Component</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.RaceComponents.Values">
            ----------------------------------------------------------------------------
            <summary>
            Get the Values in the collection.
            <para>
            Use: <c>foreach (Component c in this.Values)</c>
            </para>
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Bomb">
            <summary>
            Bomb class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Bomb.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.#ctor(Nova.Common.Components.Bomb)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Provide a clone of this object.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Bomb.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Bomb.op_Addition(Nova.Common.Components.Bomb,Nova.Common.Components.Bomb)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>Sum of the properties.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.op_Multiply(Nova.Common.Components.Bomb,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to scale (multiply) bombs.
            </summary><param name="bomb">
            The bomb property to be scaled (multiplied).
            </param> <param name="bombCount">
            The scalar (number of bombs) to multiply by.
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Bomb.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.#ctor">
            <summary>
            Initializes a new instance of the CapacitorProperty class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.#ctor(Nova.Common.Components.CapacitorProperty)">
            <summary>
            Initializes a new instance of the CapacitorProperty class.
            </summary>
            <param name="existing">An existing property to copy.</param>
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the CapacitorProperty class.
            </summary>
            <param name="existing">Capacitance boost of this property.</param>
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.op_Addition(Nova.Common.Components.CapacitorProperty,Nova.Common.Components.CapacitorProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>Sum of the properties.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.op_Multiply(Nova.Common.Components.CapacitorProperty,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instances of this property.</param>
            <returns>A single property that represents all these instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.CapacitorProperty.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Colonizer">
            <summary>
            Colonizer class
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.#ctor">
            <summary>
            Initializes a new instance of the Colonizer class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.#ctor(Nova.Common.Components.Colonizer)">
            <summary>
            Initializes a new instance of the Colonizer class.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.Colonizer"/> property to copy.</param>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>Clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Colonizer.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.op_Addition(Nova.Common.Components.Colonizer,Nova.Common.Components.Colonizer)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand</param>
            <param name="op2">RHS operand</param>
            <returns>Sum of the properties.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Colonizer.op_Multiply(Nova.Common.Components.Colonizer,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instances of this property.</param>
            <returns>A single property that represents all these instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Colonizer.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the Colonizer class.
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
        </member>
        <member name="M:Nova.Common.Components.Colonizer.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.#ctor">
            <summary>
            Initializes a new instance of the ComponentProperty class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.#ctor(Nova.Common.Components.ComponentProperty)">
            <summary>
            Initializes a new instance of the ComponentProperty class.
            Copy constructor.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.ComponentProperty"/> to copy.</param>
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Add the <see cref="T:Nova.Common.Components.ComponentProperty"/> op2 to the current property.
            </summary>
            <param name="op2">A <see cref="T:Nova.Common.Components.ComponentProperty"/> of the same daughter type as the calling object.</param>
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.Scale(System.Int32)">
            <summary>
            Scale up (multiply) this <see cref="T:Nova.Common.Components.ComponentProperty"/>, e.g. for a stack of Armor components in a <see cref="T:Nova.Common.Components.ShipDesign"/> slot.
            </summary>
            <param name="scalar">The number of components in the stack.</param>
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the ComponentProperty class.
            Load from XML: Initialising constructor from an XML node.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.ComponentProperty.ToXml(System.Xml.XmlDocument)">
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Defense.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.#ctor(System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">Defence value of 1 defence of this type.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.#ctor(Nova.Common.Components.Defense)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">An existing object to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Defense.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Defense.op_Addition(Nova.Common.Components.Defense,Nova.Common.Components.Defense)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>Sum of the properties.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.op_Multiply(Nova.Common.Components.Defense,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instances of this property.</param>
            <returns>A single property that represents all these instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Defense.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.#ctor(Nova.Common.Components.MassDriver)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.#ctor(System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">The initial mass driver value.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.MassDriver.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.MassDriver.op_Addition(Nova.Common.Components.MassDriver,Nova.Common.Components.MassDriver)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>
            A <see cref="T:Nova.Common.Components.MassDriver"/> representing the sum of two mass drivers. 
            This is the best of the two or one warp higher if the same.
            </returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.op_Multiply(Nova.Common.Components.MassDriver,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            Mass Driver doesn't scale.
            </summary>
            <param name="op1">The <see cref="T:Nova.Common.Components.MassDriver"/> to scale.</param>
            <param name="scalar">The number of mass drivers in the stack.</param>
            <returns>A mass driver representing the stack. +1 warp speed if more than one.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MassDriver.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Radiation">
            <summary>
            This class defines a radiation property such as that on the Radiating Hydro-Ram Scoop.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Radiation.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.#ctor(Nova.Common.Components.Radiation)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">Existing <see cref="T:Nova.Common.Components.Radiation"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.#ctor(System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">Initial radiation value.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Return a copy of this object.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Radiation.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Radiation.op_Addition(Nova.Common.Components.Radiation,Nova.Common.Components.Radiation)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>A single Radiation property with a value equal to the max of op1 and op2.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.op_Multiply(Nova.Common.Components.Radiation,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property in a stack to be scaled.</param>
            <param name="scalar">Number of items in the stack.</param>
            <returns>A <see cref="T:Nova.Common.Components.Radiation"/> property equal to op1.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Radiation.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.SimpleProperty">
            <summary>
            Simple Property Class
            </summary>
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.#ctor">
            ----------------------------------------------------------------------------
            /// <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.#ctor(Nova.Common.Components.SimpleProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor
            </summary>
            <param name="existing">Existing property to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.op_Addition(Nova.Common.Components.SimpleProperty,Nova.Common.Components.SimpleProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operator.</param>
            <param name="op2">RHS operator.</param>
            <returns>op1</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.op_Multiply(Nova.Common.Components.SimpleProperty,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instances of this property.</param>
            <returns>A single property that represents all these instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.SimpleProperty.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.DoubleProperty">
            <summary>
            DoubleProperty class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.#ctor(System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">The value of this property (e.g. BattleSpeed).</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.#ctor(Nova.Common.Components.DoubleProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">A <see cref="T:Nova.Common.Components.DoubleProperty"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.op_Addition(Nova.Common.Components.DoubleProperty,Nova.Common.Components.DoubleProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>Sum of both operands.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.op_Multiply(Nova.Common.Components.DoubleProperty,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instnaces of the property.</param>
            <returns>A single property representing all the instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.DoubleProperty.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Design">
            <summary>
            A design.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Design.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Design.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within a Nova xml file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Design.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Generate an XmlElement representing the Design.
            </summary>
            <param name="xmldoc">The parent XmlDocument.</param>
            <returns>An XmlElement representing the Design.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Computer.#ctor">
            <summary>
            Initializes a new instance of the Computer class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Computer.#ctor(Nova.Common.Components.Computer)">
            <summary>
            Initializes a new instance of the Computer class.
            Copy constructor.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.Computer"/>.</param>
        </member>
        <member name="M:Nova.Common.Components.Computer.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Computer.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Computer.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Computer.op_Addition(Nova.Common.Components.Computer,Nova.Common.Components.Computer)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>Sum of the properties.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Computer.op_Multiply(Nova.Common.Components.Computer,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property to scale.</param>
            <param name="scalar">Number of instances of this property.</param>
            <returns>A single property that represents all these instances.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Computer.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Computer.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Fuel">
            <summary>
            Fuel Property.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Fuel.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.#ctor(System.Int32,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="capacity">Fuel capacity added by this property.</param>
            <param name="generation">Fuel generation per year added by this property.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.#ctor(Nova.Common.Components.Fuel)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.Fuel"/> property to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implementation of the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A copy of this <see cref="T:Nova.Common.Components.Fuel"/> property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Fuel.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Fuel.op_Addition(Nova.Common.Components.Fuel,Nova.Common.Components.Fuel)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operator.</param>
            <param name="op2">RHS operator.</param>
            <returns>A new <see cref="T:Nova.Common.Components.Fuel"/> property with total capacity and fuel generation of both operands.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.op_Multiply(Nova.Common.Components.Fuel,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">The property to be scaled.</param>
            <param name="scalar">The number of instances of the property.</param>
            <returns>The scaled property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Fuel.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor. 
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.#ctor(Nova.Common.Components.HullAffinity)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.HullAffinity"/> object.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.#ctor(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">The name of the hull type this affinity is for.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A copy of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.op_Addition(Nova.Common.Components.HullAffinity,Nova.Common.Components.HullAffinity)">
            ----------------------------------------------------------------------------
            <summary><para>
            Operator overloading for +.
            </para><para>
            Provide a way to sum up properties in the ship design.
            </para><para>
            Doesn't mean anything in the context of HullAffinity.
            </para></summary>
            <param name="op1">The LHS parameter.</param>
            <param name="op2">The RHS parameter.</param>
            <returns>The value of op1.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.op_Multiply(Nova.Common.Components.HullAffinity,System.Int32)">
            ----------------------------------------------------------------------------
            <summary><para>
            Operator overloading for *.
            </para><para>
            Used to scale (multiply) properties in the ship design.
            </para><para>
            Doesn't mean anything in the context of HullAffinity.
            </para></summary>
            <param name="scalar">Scaling factor.</param>
            <returns>The value of op1.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising Constructor from an xml node.
            </summary>
            <param name="node">A "Property" <see cref="T:System.Xml.XmlNode"/> with Type equal 
            to "Hull Affinity" in a Nova compenent definition file (xml document).</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.HullAffinity.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.MineLayer">
            <summary>
            MineLayer property class
            </summary>
        </member>
        <member name="M:Nova.Common.Components.MineLayer.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.#ctor(Nova.Common.Components.MineLayer)">
            ----------------------------------------------------------------------------
            <summary>
            copy constructor
            </summary>
            <param name="existing"><see cref="T:Nova.Common.Components.MineLayer"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.MineLayer.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.MineLayer.op_Addition(Nova.Common.Components.MineLayer,Nova.Common.Components.MineLayer)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            Only laying rates sum up, and this only makes sense if the mine layers produce
            the same mines. 
            </summary> 
            <remarks>
            In Stars! mines are the same if HitChance is the 
            same, and that test is used here.
            </remarks>
            <param name="op1">LHS operator</param>
            <param name="op2">RHS operator</param>
            <returns>A single <see cref="T:Nova.Common.Components.MineLayer"/> property with a laying rate equal to the total of op1 and op2.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.op_Multiply(Nova.Common.Components.MineLayer,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            Only laying rates scale, and this only makes sense if the mine layers produce
            the same mines. For Stars! like mines they are the same if HitChance is the 
            same
            </summary>
            <param name="op1"><see cref="T:Nova.Common.Components.MineLayer"/> to be scaled.</param>
            <param name="scalar">Number of <see cref="T:Nova.Common.Components.MineLayer"/>s in the stack.</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">
            node is a "Property" node with Type=="MineLayer" in a Nova 
            compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.MineLayer.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Gate">
            <summary>
            Gate class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Gate.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.#ctor(Nova.Common.Components.Gate)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.Gate"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A copy of this <see cref="T:Nova.Common.Components.Gate"/>.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Gate.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Gate.op_Addition(Nova.Common.Components.Gate,Nova.Common.Components.Gate)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            (Gates are not addative, see the remarks.)
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>LHS operand.</returns>
            <remarks>
            Whilst it is possible to have more than one gate on a hull, and it could
            make sense to use the best capabilities of each gate, this is not how
            Stars! works with gates. One gate gets precedence and the other is ignored.
            TODO (priority 2) check that the same orbital slot takes precedence as
            in Stars!
            TODO (priority 3) add a game option to modify this behaviour so gates
            can add in a ?meaningful? way (or allow the best gate for the 
            circumstances to be used).
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.op_Multiply(Nova.Common.Components.Gate,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            Gates are not cumulative, see the remarks for the operator+.
            </summary>
            <param name="op1"></param>
            <param name="scalar"></param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Gate.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.IntegerProperty">
            <summary>
            Integer Property Class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.#ctor(Nova.Common.Components.IntegerProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">Existing <see cref="T:Nova.Common.Components.IntegerProperty"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.#ctor(System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">Initial value.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.op_Addition(Nova.Common.Components.IntegerProperty,Nova.Common.Components.IntegerProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>An <see cref="T:Nova.Common.Components.IntegerProperty"/> equal to the linear sum of op1 and op2.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.op_Multiply(Nova.Common.Components.IntegerProperty,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">The <see cref="T:Nova.Common.Components.IntegerProperty"/> in the stack.</param>
            <param name="scalar">The number of items in the stack.</param>
            <returns>An <see cref="T:Nova.Common.Components.IntegerProperty"/> representing the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.IntegerProperty.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.ProbabilityProperty">
            <summary>
            Probability property.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.#ctor(Nova.Common.Components.ProbabilityProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.#ctor(System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="existing">Initial value.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>Clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.op_Addition(Nova.Common.Components.ProbabilityProperty,Nova.Common.Components.ProbabilityProperty)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>A <see cref="T:Nova.Common.Components.ProbabilityProperty"/> with value (as a percentage) 
            equal to the independed probability of op1 or op2.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.op_Multiply(Nova.Common.Components.ProbabilityProperty,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Property in the stack.</param>
            <param name="scalar">Number of items in the stack.</param>
            <returns>A single property with value equal to the total independent probability of the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ProbabilityProperty.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Terraform">
            <summary>
            Terraform class
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Terraform.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.#ctor(Nova.Common.Components.Terraform)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">The object to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Terraform.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Nova.Common.Components.Terraform.op_Addition(Nova.Common.Components.Terraform,Nova.Common.Components.Terraform)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operator</param>
            <param name="op2">RHS operator</param>
            <returns>A single terraform property that represents the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.op_Multiply(Nova.Common.Components.Terraform,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            Terraformers don't scale, as the modifications represent maximums.
            Note this represents the terraforming capability of a component,
            not multiple terraforming units produced by a planet, which work differently (1% each).
            </summary>
            <param name="op1">Property to be scaled.</param>
            <param name="scalar">Number of components in the stack.</param>
            <returns>A single property that represents the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from Xml
            </summary>
            <param name="node">
            node is a "Property" node with Type=="Terraform" in a Nova 
            compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Terraform.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.WeaponType">
            ----------------------------------------------------------------------------
            <summary>
            Enumeration of weapon types.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Weapon">
            ----------------------------------------------------------------------------
            <summary>
            Weapon class
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.#ctor(Nova.Common.Components.Weapon)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Components.Weapon"/> compoenent.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A clone of this <see cref="T:Nova.Common.Components.Weapon"/></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.IsSameWeaponType(Nova.Common.Components.Weapon)">
            <summary>
            See if this weapon is of the same type - everything but power must match (power can be added together for weapon groups).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nova.Common.Components.Weapon.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Weapon.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Weapon.op_Addition(Nova.Common.Components.Weapon,Nova.Common.Components.Weapon)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            only power adds, and this only makes sense if the weapons are the same
            </summary>
            <param name="op1">LHS operator.</param>
            <param name="op2">RHS operator.</param>
            <returns>A single <see cref="T:Nova.Common.Components.Weapon"/> object that represents the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.op_Multiply(Nova.Common.Components.Weapon,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            only power adds, and this only makes sense if the weapons are the same
            </summary>
            <param name="op1">The <see cref="T:Nova.Common.Components.Weapon"/> to be scaled.</param>
            <param name="scalar">The number of components in the stack.</param>
            <returns>A single <see cref="T:Nova.Common.Components.Weapon"/> that represents the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from Xml.
            </summary>
            <param name="node">
            node is a "Property" node with Type=="Weapon" in a Nova 
            compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Weapon.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            /// <summary>
            Save as Xml
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>an XmlElement representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.AllComponents">
            <summary>
            Provides singleton access (via AllComponents.Data) to a <see cref="T:System.Collections.Hashtable"/> containing all <see cref="T:Nova.Common.Components.Component"/>s indexed on the component's name.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.AllComponents.#ctor">
            <summary>
            Prevents a default instance of the AllComponents class from being created.
            </summary>
        </member>
        <member name="P:Nova.Common.Components.AllComponents.Data">
            ----------------------------------------------------------------------------
            <summary>
            Provide a mechanism of accessing the single instance of this class that we
            will create locally. Creation of the data is thread-safe.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.Contains(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Check if AllComponents contains a particular Component.
            </summary>
            <param name="componentName">The Name of the Component to look for.</param>
            <returns>True if the component is included.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.Contains(Nova.Common.Components.Component)">
            ----------------------------------------------------------------------------
            <summary>
            Check if AllComponents contains a particular Component.
            </summary>
            <param name="component">The Component to look for.</param>
            <returns>True if the component is included.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.Restore">
            ----------------------------------------------------------------------------
            <summary>
            Restore the component definitions.
            </summary>
            <exception cref="T:System.Data.OperationAbortedException">
            The loading of the component definition was aborted.
            </exception>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.MakeNew">
            ----------------------------------------------------------------------------
            <summary>
            Start a new component definition set. This simply wipes all components from
            the in memory component definitions.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.LoadComponents(System.Object)">
            ----------------------------------------------------------------------------
            <summary>
            Load all the components form the component definition file, nominally components.xml.
            </summary>
            <param name="status">An <see cref="T:Nova.Common.IProgressCallback"/> used for updating the progress dialog.</param>
            <remarks>
            This is run in a worker thread and therefore has no direct access to the UI/user.
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.AllComponents.Save">
            ----------------------------------------------------------------------------
            <summary> Save the component data. </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.AllComponents.Graphics">
            ----------------------------------------------------------------------------
            <summary>
            Get the path where the graphics files are stored.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.AllComponents.ComponentFile">
            <summary>
            Path and file name of the component definition file, automatically located and persisted, or null.
            </summary>
        </member>
        <member name="T:Nova.Common.Components.Component">
            <summary>
            Component class defining features common to all component types (e.g.
            Mass, cost, etc.). One or more specific component properties are contained 
            in the Properties collection.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Component.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Component.#ctor(Nova.Common.Components.Component)">
            <summary>
            Copy constructor.
            </summary>
            <param name="existing"></param>
        </member>
        <member name="M:Nova.Common.Components.Component.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Component.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Engine">
            <summary>
            Engine property.
            </summary>
        </member>
        <member name="P:Nova.Common.Components.Engine.FreeWarpSpeed">
            <summary>
            Gets max speed at which engine uses 0 fuel
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Engine.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.#ctor(Nova.Common.Components.Engine)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="existing">The existing <see cref="T:Nova.Common.Components.Engine"/> to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>A copy of this <see cref="T:Nova.Common.Components.Engine"/> property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Engine.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Engine.op_Addition(Nova.Common.Components.Engine,Nova.Common.Components.Engine)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>The value of op1 - engines don't add in Stars! or Nova.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.op_Multiply(Nova.Common.Components.Engine,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="scalar">Scaling factor.</param>
            <returns>The value of op1 - engines don't scale in Nova.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Engine.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Hull">
            <summary>
            The definition of a hull object.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Hull.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.#ctor(Nova.Common.Components.Hull)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor for the hull.
            </summary>
            <param name="existing">The <see cref="T:Nova.Common.Components.Hull"/> to be copied.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Hull.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Hull.op_Addition(Nova.Common.Components.Hull,Nova.Common.Components.Hull)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            Has no meaning in the context of a Hull.
            </summary>
            <param name="op1">First operand.</param>
            <param name="op2">Second operand.</param>
            <returns>The first operand.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.op_Multiply(Nova.Common.Components.Hull,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            Has no meaning in the context of a Hull.
            </summary>
            <param name="op1"></param>
            <param name="scalar"></param>
            <returns>The first operand.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.Hull.IsStarbase">
            ----------------------------------------------------------------------------
            <summary>
            Determine if this is a starbase hull.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.Hull.CanRefuel">
            ----------------------------------------------------------------------------
            <summary>
            Determine if this is a starbase that can refuel.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Hull.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.Scanner">
            <summary>
            Scanner class (a component property).
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Scanner.#ctor">
            <summary>
            Initializes a new instance of the Scanner class.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.Scanner.#ctor(Nova.Common.Components.Scanner)">
            <summary>
            Initializes a new instance of the Scanner class.
            </summary>
            <param name="existing">An existing Scanner to copy.</param>
        </member>
        <member name="M:Nova.Common.Components.Scanner.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Implement the ICloneable interface so properties can be cloned.
            </summary>
            <returns>Clone of this object.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Scanner.Add(Nova.Common.Components.ComponentProperty)">
            <summary>
            Polymorphic addition of properties.
            </summary>
            <param name="op2"></param>
        </member>
        <member name="M:Nova.Common.Components.Scanner.Scale(System.Int32)">
            <summary>
            Polymorphic multiplication of properties.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nova.Common.Components.Scanner.op_Addition(Nova.Common.Components.Scanner,Nova.Common.Components.Scanner)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a way to add properties in the ship design.
            </summary>
            <param name="op1">LHS operand.</param>
            <param name="op2">RHS operand.</param>
            <returns>A single Scanner property with the scanning ability of both op1 and op2 scanners.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Scanner.op_Multiply(Nova.Common.Components.Scanner,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Operator* to scale (multiply) properties in the ship design.
            </summary>
            <param name="op1">Scanner property to scale.</param>
            <param name="scalar">Number of items in the stack.</param>
            <returns>A single Scanner property with the scanning ability of the stack.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.Scanner.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the Scanner class.
            Loads from XML.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova compenent definition file (xml document).
            </param>
        </member>
        <member name="M:Nova.Common.Components.Scanner.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Components.ShipDesign">
            <summary>
            The blueprint for building a ship.
            </summary>
        </member>
        <member name="M:Nova.Common.Components.ShipDesign.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ShipDesign.Update">
            ----------------------------------------------------------------------------
            <summary>
            The ship design object has all information that could be found from a scan
            of the the ship hull modules. However scanning these for a particular piece
            of information is inefficient. This method reorganises the information
            to save other routines from having to do this.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ShipDesign.SumProperty(Nova.Common.Components.ComponentProperty,System.String,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Add a property to the ShipDesign.Summary.
            </summary>
            <param name="property">
            The property to be added to the ShipDesign.Summary
            </param><param name="type">
            The type of the property: one of Component.propertyKeys, normally 
            the key used to obtain it from a Properties dictionary.
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.Shield">
            ----------------------------------------------------------------------------
            <summary>
            Get the total sheild value of this ShipDesign.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.Armor">
            ----------------------------------------------------------------------------
            <summary>
            Get the total Armor value of this ShipDesign.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.FuelCapacity">
            ----------------------------------------------------------------------------
            <summary>
            Get the total FuelCapacity of this ShipDesign
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.CargoCapacity">
            ----------------------------------------------------------------------------
            <summary>
            Get the total cargo capacity of this design.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.DockCapacity">
            ----------------------------------------------------------------------------
            <summary>
            Get the dock capacity of this ShipDesign (0 if none).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.NormalScan">
            ----------------------------------------------------------------------------
            <summary>
            Get the normal scanner capability of this ShipDesign (0 if none)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.PenetratingScan">
            ----------------------------------------------------------------------------
            <summary>
            Get the penetrating scanner ability of this ShipDesign (0 if none)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.Engine">
            ----------------------------------------------------------------------------
            <summary>
            Get the engine component fitted to this ShipDesign (null if none).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.BattleSpeed">
            ----------------------------------------------------------------------------
            <summary>
            Get this design's battle speed (0.0 if it can't move, i.e. star-base).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.BeamDeflectors">
            ----------------------------------------------------------------------------
            <summary>
            Get the total beam defletion capability.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.Number_of_Engines">
            ----------------------------------------------------------------------------
            <summary>
            Get a count of the number of engines. Assumes there is only one engine stack.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.IsStarbase">
            ----------------------------------------------------------------------------
            <summary>
            Determine if this is a starbase hull
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.CanRefuel">
            ----------------------------------------------------------------------------
            <summary>
            Get if this is a starbase that can provide unlimited fuel.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Components.ShipDesign.Initiative">
            ----------------------------------------------------------------------------
            <summary>
            Get the initiative of the ShipDesign, including computers but not weapon initiative.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ShipDesign.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Generate an XmlElement representation of the ShipDesign for saving to file.
            Note this uses the minimal approach of storing the ship hull object 
            (and recursing through all components). All figured values will need to be 
            recalculated on loading.
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement representing the ShipDesign</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Components.ShipDesign.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising Constructor from an xml node.
            </summary>
            <param name="node">A "ShipDesign" node Nova save file (xml document)</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.FileSearcher.GetAvailableRaces">
            <summary>
            Identify the player race's. 
            This is done by enumerating the race files present and
            loading each race definition.
            </summary>
            <returns>An Hashtable containing all the races</returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.GetSettingsFile">
            <summary>
            Get the game settings file.
            </summary>
            <returns>The full path and name of the game settings file or null.</returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.GetConfigFile">
            <summary>
            Get the game settings file.
            </summary>
            <returns>The full path and name of the nova.config file or null.</returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.GetFile(System.String,System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Find the file 'fileName'. 
            </summary>
            <param name="configKey">The config file key we would like to store the file path in. If this key is not set and we find the file, then it will be set to save searching next time. Ideally this key is set when the application is installed.</param>
            <param name="pathOnly">true if the config file should contain only the path. False if it is the path+file name</param>
            <param name="developmentPath">The expected path relative to the running application, in the development environment.</param>
            <param name="deployedPath">The expected path relative to the running application, in the deployed environment.</param>
            <param name="fileName">The name of the file we are looing for.</param>
            <returns>The absolute path, including the file name. null if the file can't be found.</returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.GetFolder(System.String,System.String)">
            <summary>
            Find a folder. Use this if you are going to store something there. If you intend to open or use a file, use GetFile() instead.
            </summary>
            <param name="configKey">The config file key we would like the folder path to be stored in.</param>
            <param name="defaultFolder">The default folder name, as in NovaRoot\defaultFolder, to use if the key is not set.</param>
            <returns>The path to the folder, being either the folder defined by the key, or Path.Combine(NovaRoot, defaultFolder). Will create the folder if neccessary</returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.GetNovaRoot">
            <summary>
            Try to locate the nova root directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nova.Common.FileSearcher.AskUserForFile(System.String)">
            <summary>
            Ask the user to locate a file.
            </summary>
            <param name="fileName">The name of the file to loacate.</param>
            <returns>The path and filename given or null.</returns>
        </member>
        <member name="M:Nova.Common.StarList.#ctor">
            ----------------------------------------------------------------------------
            /// <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.Add(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Add a new star to the StarList
            </summary>
            <param name="star">The Star to be added to the StarList</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.Remove(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a Star from the StarList
            </summary>
            <param name="star">The star to remove.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.Remove(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a star from the StarList
            </summary>
            <param name="starName">The name of the star.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.Contains(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Check if the racial traits contains a particular trait.
            </summary>
            <param name="star">The Star to check for</param>
            <returns>true if star is in the StarList</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.Contains(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Check if the racial traits contains a particular trait.
            </summary>
            <param name="starName">The name of a star.</param>
            <returns>true if starName is the name of one of the stars in the StarList</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.StarList.Item(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Allow array type indexing to a StarList.
            </summary>
            <param name="index">The name of the star.</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.GetNext(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Get the next star in the list.
            </summary>
            <param name="star">The current star.</param>
            <returns>The next star, or the current star if there is only one.</returns>
            <exception cref="T:System.NullReferenceException"> if star is null.</exception>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.StarList.GetPrevious(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Get the previous star in the list.
            </summary>
            <param name="star">The current star.</param>
            <returns>The previous star, or the current star if there is only one.</returns>
            <exception cref="T:System.NullReferenceException"> if star is null.</exception>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.StarList.Values">
            ----------------------------------------------------------------------------
            <summary>
            Get the internal collection of values.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.IProgressCallback">
            <summary>
            This defines an interface which can be implemented by UI elements
            which indicate the progress of a long operation.
            (See ProgressWindow for a typical implementation)
            </summary>
        </member>
        <member name="M:Nova.Common.IProgressCallback.Begin(System.Int32,System.Int32)">
            <summary>
            Call this method from the worker thread to initialize
            the progress callback.
            </summary>
            <param name="minimum">The minimum value in the progress range (e.g. 0)</param>
            <param name="maximum">The maximum value in the progress range (e.g. 100)</param>
        </member>
        <member name="M:Nova.Common.IProgressCallback.Begin">
            <summary>
            Call this method from the worker thread to initialize
            the progress callback, without setting the range
            </summary>
        </member>
        <member name="M:Nova.Common.IProgressCallback.SetRange(System.Int32,System.Int32)">
            <summary>
            Call this method from the worker thread to reset the range in the progress callback
            </summary>
            <param name="minimum">The minimum value in the progress range (e.g. 0)</param>
            <param name="maximum">The maximum value in the progress range (e.g. 100)</param>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="M:Nova.Common.IProgressCallback.SetText(System.String)">
            <summary>
            Call this method from the worker thread to update the progress text.
            </summary>
            <param name="text">The progress text to display</param>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="M:Nova.Common.IProgressCallback.StepTo(System.Int32)">
            <summary>
            Call this method from the worker thread to increase the progress counter by a specified value.
            </summary>
            <param name="val">The amount by which to increment the progress indicator</param>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="M:Nova.Common.IProgressCallback.Increment(System.Int32)">
            <summary>
            Call this method from the worker thread to step the progress meter to a particular value.
            </summary>
            <param name="val">The value to which to step the meter</param>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="P:Nova.Common.IProgressCallback.IsAborting">
            <summary>
            If this property is true, then you should abort work
            </summary>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="P:Nova.Common.IProgressCallback.Success">
            <summary>
            This property is used to indicate if the operation being progressed was successful.
            </summary>
        </member>
        <member name="M:Nova.Common.IProgressCallback.End">
            <summary>
            Call this method from the worker thread to finalize the progress meter
            </summary>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="M:Nova.Common.ProgressDialog.Begin(System.Int32,System.Int32)">
            <summary>
            Call this method from the worker thread to initialize
            the progress meter.
            </summary>
            <param name="minimum">The minimum value in the progress range (e.g. 0)</param>
            <param name="maximum">The maximum value in the progress range (e.g. 100)</param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.Begin">
            <summary>
            Call this method from the worker thread to initialize
            the progress callback, without setting the range
            </summary>
        </member>
        <member name="M:Nova.Common.ProgressDialog.SetRange(System.Int32,System.Int32)">
            <summary>
            Call this method from the worker thread to reset the range in the progress callback
            </summary>
            <param name="minimum">The minimum value in the progress range (e.g. 0)</param>
            <param name="maximum">The maximum value in the progress range (e.g. 100)</param>
            <remarks>You must have called one of the Begin() methods prior to this call.</remarks>
        </member>
        <member name="M:Nova.Common.ProgressDialog.SetText(System.String)">
            <summary>
            Call this method from the worker thread to update the progress text.
            </summary>
            <param name="text">The progress text to display</param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.Increment(System.Int32)">
            <summary>
            Call this method from the worker thread to increase the progress counter by a specified value.
            </summary>
            <param name="val">The amount by which to increment the progress indicator</param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.StepTo(System.Int32)">
            <summary>
            Call this method from the worker thread to step the progress meter to a particular value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="P:Nova.Common.ProgressDialog.IsAborting">
            <summary>
            If this property is true, then you should abort work
            </summary>
        </member>
        <member name="M:Nova.Common.ProgressDialog.End">
            <summary>
            Call this method from the worker thread to finalize the progress meter
            </summary>
        </member>
        <member name="M:Nova.Common.ProgressDialog.OnLoad(System.EventArgs)">
            <summary>
            Handles the form load, and sets an event to ensure that
            intialization is synchronized with the appearance of the form.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Handler for 'Close' clicking
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.UpdateStatusText">
            <summary>
            Utility function that formats and updates the title bar text
            </summary>
        </member>
        <member name="M:Nova.Common.ProgressDialog.AbortWork">
            <summary>
            Utility function to terminate the thread
            </summary>
        </member>
        <member name="F:Nova.Common.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Nova.Common.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Nova.Common.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Nova.Common.AllRaceIcons">
            <summary>
            A singleton containing all the useable race icons.
            </summary>
        </member>
        <member name="M:Nova.Common.AllRaceIcons.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Private constructor to prevent anyone else creating instances of this class.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.AllRaceIcons.Data">
            ----------------------------------------------------------------------------
            <summary>
            Provide a mechanism of accessing the single instance of this class that we
            will create locally. Creation of the data is thread-safe.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.AllRaceIcons.Restore">
            ----------------------------------------------------------------------------
            <summary>
            Load the race images
            </summary>
            <returns>true if the race icons were successfuly loaded.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.AllTraits.#ctor">
            <summary>
            Private constructor to prevent anyone else creating instances of this class.
            </summary>
        </member>
        <member name="P:Nova.Common.AllTraits.Data">
            <summary>
            Provide a mechanism of accessing the single instance of this class that we
            will create locally. Creation of the data is thread-safe.
            </summary>
        </member>
        <member name="F:Nova.Common.AllTraits.TraitKeys">
            <summary>
            Provide a list of all trait keys. 
            These can be used to index AllTraits.Data.All or in a foreach loop.
            </summary>
        </member>
        <member name="F:Nova.Common.AllTraits.TraitString">
            <summary>
            Provide a list of all the trait names. This can be used to get the printable name of a trait.
            </summary>
        </member>
        <member name="T:Nova.Common.TraitEntry">
            <summary>
            Class to support the format of each trait. Static definitions of all the 
            primary and secondary racial traits are in PrimaryTraits.cs and SecondaryTraits.cs
            (both primary and lesser racial traits use this).
            </summary>
        </member>
        <member name="M:Nova.Common.TraitEntry.#ctor(System.String,System.String,System.Int32,System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Trait constructor. In most instances a string containing the trait code is 
            sufficient. Use this when it is necessary to have acess to all the details of a trait.
            </summary>
            <param name="n">Name e.g. "Hyper Expansion" or "Regenerating Shields" (may contain spaces)</param>
            <param name="a">Code e.g. "HE" or "RS" (must be unique, all caps, no spaces or punctuation)</param>
            <param name="c">Cost in advantage points, negative cost give more points to buy other things</param>
            <param name="d">Detailed description (paragraph).</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.GetHashCode">
            ----------------------------------------------------------------------------
            <summary>
            Return the TraitKey for a TraitEntry
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.ToString">
            ----------------------------------------------------------------------------
            <summary>
            Return a String representation of the TraitEntry
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Equality(Nova.Common.TraitEntry,Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Test for equality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.Equals(System.Object)">
            ----------------------------------------------------------------------------
            <summary>
            Test for equality.
            </summary>
            <param name="trait">Trait to compare.</param>
            <returns>true if the traits are the same trait.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Inequality(Nova.Common.TraitEntry,Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Test for equality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Equality(System.String,Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Test for equality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>       
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Inequality(System.String,Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Test for in-equality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>       
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Equality(Nova.Common.TraitEntry,System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Test for equality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>       
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitEntry.op_Inequality(Nova.Common.TraitEntry,System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Test for inequality.
            </summary>
            <param name="a">Trait to compare.</param>
            <param name="b">Trait to compare</param>
            <returns>true if the traits are the same trait.</returns>       
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.TraitList">
            <summary>
            Maintains a collection of TraitEntry objects.
            </summary>
        </member>
        <member name="M:Nova.Common.TraitList.Add(Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Add a new trait to the race's collection of traits.
            </summary>
            <param name="new_trait">A TraitEntry, such as those in SecondaryTraits.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitList.Add(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Add a new trait to the race's collection of traits.
            </summary>
            <param name="newTrait">The code or short name of a trait such as IS for Improved Starbases. These are defined in AllTraits</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitList.Remove(Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a trait from the race's collection of traits.
            </summary>
            <param name="traitToRemove">The trait to remove.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitList.Remove(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Remove a trait from the race's collection of traits.
            </summary>
            <param name="traitToRemove">The code (short name) for the trait to remove, as defined in AllTraits.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TraitList.Contains(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Check if the racial traits contains a particular trait.
            </summary>
            <param name="trait"></param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.TraitList.Item(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Allow array type indexing to a TraitList.
            </summary>
            <param name="index">The code (short name) for the trait, as defined in AllTraits.</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Report">
            ----------------------------------------------------------------------------
            <summary>
            Provides a variety of message pop ups.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Report.Error(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Report an error
            </summary>
            <param name="text">Message to display.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Report.Information(System.String)">
            <summary>
            Raise a dialog to report an information message.
            </summary>
            <param name="text">Message to display.</param>
        </member>
        <member name="M:Nova.Common.Report.FatalError(System.String)">
            <summary>
            Report a fatal error and terminate the application.
            </summary>
            <param name="text">Message to display.</param>
        </member>
        <member name="M:Nova.Common.Report.Debug(System.String)">
            <summary>
            Report Debug Messages if in debugging mode. Otherwise do nothing
            </summary>
            <param name="text">Message to display.</param>
        </member>
        <member name="T:Nova.Common.Serializer">
            <summary>
            Serializes and deserializes an object, or an entire graph of connected objects, in binary format.
            </summary>
        </member>
        <member name="M:Nova.Common.Serializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into an object graph.
            </summary>
            <param name="serializationStream">
            The stream from which to deserialize the object graph.
            </param>
            <returns>
            The top (root) of the object graph.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <i>serializationStream</i> is a null reference.
            </exception>
        </member>
        <member name="M:Nova.Common.Serializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object, or graph of connected objects, to the given stream.
            </summary>
            <param name="serializationStream">
            The stream to which the graph is to be serialized.
            </param>
            <param name="item">
            The object at the root of the graph to serialize.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <i>serializationStream</i> is a null reference.
            </exception>
        </member>
        <member name="M:Nova.Common.BattlePlan.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.BattlePlan.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising constructor from an XmlNode
            </summary>
            <param name="node">An XmlNode representing a BattlePlan</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.BattlePlan.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Generate an XmlElement representation of a battle plan for saving.
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement representaion of the BattlePlan</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.BattleReport.Movement">
            ----------------------------------------------------------------------------
            <summary>
            A class to record a new stack position.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.BattleReport.Target">
            ----------------------------------------------------------------------------
            <summary>
            A class to record a new target.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.BattleReport.Destroy">
            ----------------------------------------------------------------------------
            <summary>
            A class to destroy a ship in a given stack.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.BattleReport.Weapons">
            ----------------------------------------------------------------------------
            <summary>
            A class to record weapons being fired.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="F:Nova.Common.BattleReport.Location">
            ----------------------------------------------------------------------------
            <summary>
            Main battle report components.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Cargo">
            <summary>
            Cargo class
            </summary>
        </member>
        <member name="F:Nova.Common.Cargo.ColonistsInKilotons">
            <summary>
            Colonists in kT. Multiply by GlobalDefinitions.ColonistsPerKiloton to get the actual number of colonists.
            </summary>
        </member>
        <member name="M:Nova.Common.Cargo.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Defualt constructor (needed if there is a copy constructor).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Cargo.#ctor(Nova.Common.Cargo)">
            ----------------------------------------------------------------------------
            <summary>
            Copy Constructor
            </summary>
            <param name="copy">Cargo object to copy</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Cargo.Mass">
            ----------------------------------------------------------------------------
            <summary>
            Get the Mass of the cargo.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Cargo.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova xml document.
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Cargo.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this object to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Cargo</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Fleet">
            <summary>
            Fleet class.
            </summary>
        </member>
        <member name="F:Nova.Common.Fleet.Cargo">
            <summary>
            The cargo carried by the entire fleet. 
            To avoid issues with duplication cargo is traked at the fleet level only.
            </summary>
        </member>
        <member name="M:Nova.Common.Fleet.#ctor(System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            placeholder constructor - Fleet should be replaced by a reference to the fleet with the same ID
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.#ctor(System.String,System.String,System.Drawing.Point)">
            ----------------------------------------------------------------------------
            <summary>
            Fleet construction for unit testing and stack creation during a battle.
            </summary>
            <param name="n">The fleet name.</param>
            <param name="o">The fleet owner.</param>
            <param name="p">The fleet position</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.#ctor(Nova.Common.Fleet)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor. This is only used by the battle engine so only the fields
            used by it in creating stacks need to be copied. Note that we copy the
            ships as well. Be careful when using the copy. It is a different object.
            </summary>
            <param name="copy">The fleet to copy.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.#ctor(Nova.Common.Ship,Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Fleet construction based on a ship and some parameters from a star (this is
            the usual case for most fleets when a new ship is manufactured at a star).
            </summary>
            <param name="ship">The ship being constructed.</param>
            <param name="star">The star constructing the ship.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.Move(System.Double@,Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Move the fleet towards the waypoint at the top of the list. Fuel is consumed
            at the rate of the sum of each of the individual ships (i.e. available fuel
            is automatically "pooled" between the ships).
            </summary>
            <param name="availableTime">The portion of a year left for travel.</param>
            <param name="race">The race this fleet belongs to.</param>
            <returns>A TravelStatus indicating arrival or in-transit.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.FuelConsumption(System.Int32,Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Return the fuel consumption (mg per year) of the fleet at the specified
            warp factor.
            </summary>
            <param name="warpFactor">The warp speed of the fleet.</param>
            <param name="race">The race this fleet belongs too.</param>
            <returns>The rate of fuel consumptionin mg / year.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.FreeWarpSpeed">
            <summary>
            Return Free Warp speed for fleet.
            </summary>
        </member>
        <member name="P:Nova.Common.Fleet.CanColonize">
            <summary>
            Check if any of the ships has colonization module
            </summary>
        </member>
        <member name="P:Nova.Common.Fleet.LongRangeScan">
            ----------------------------------------------------------------------------
            <summary>
            Return the long range scan capability of the fleet.
            FIXME (priority 4) - scanning capability can be addative (but the formula is non-linear)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.ShortRangeScan">
            ----------------------------------------------------------------------------
            <summary>
            Return the short range scan capability of the fleet.
            FIXME (priority 4) - scanning capability can be addative (but the formula is non-linear)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Composition">
            ----------------------------------------------------------------------------
            <summary>
            // Return the composition of a fleet (ship design and number of ships of that
            design).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Mass">
            ----------------------------------------------------------------------------
            <summary>
            Return the mass of a fleet.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.TotalCost">
            ----------------------------------------------------------------------------
            <summary>
            Return the cost of a fleet. 
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Speed">
            ----------------------------------------------------------------------------
            <summary>
            Return the current speed of the fleet
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.IsArmed">
            ----------------------------------------------------------------------------
            <summary>
            Report if a fleet is armed
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Defenses">
            ----------------------------------------------------------------------------
            <summary>
            Return the current Defense capability of a fleet 
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Image">
            ----------------------------------------------------------------------------
            <summary>
            Choose an image from one of the ships in the fleet
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.HasBombers">
            ----------------------------------------------------------------------------
            <summary>
            Determine if the fleet has bombers
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.BombCapability">
            ----------------------------------------------------------------------------
            <summary>
            Return the total normal bombing capability
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.NumberOfMines">
            ----------------------------------------------------------------------------
            <summary>
            Return the the number of mines this fleet can lay.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.ArmorStrength">
            ----------------------------------------------------------------------------
            <summary>
            Return the total amour strength of the fleet
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.IsStarbase">
            ----------------------------------------------------------------------------
            <summary>
            Property to determine if a fleet is a starbase.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.CanRefuel">
            ----------------------------------------------------------------------------
            <summary>
            Property to determine if a fleet can re-fuel
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.Key">
            ----------------------------------------------------------------------------
            <summary>
            Return a key for use in hash tables to locate items.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Fleet.FuelCapacity">
            <summary>
            find the total fuel capacity of all ships in the fleet
            </summary>
        </member>
        <member name="P:Nova.Common.Fleet.CargoCapacity">
            <summary>
            find the total cargo capacity of the fleet
            </summary>
        </member>
        <member name="P:Nova.Common.Fleet.DockCapacity">
            <summary>
            find the total dock capacity of the fleet
            </summary>
        </member>
        <member name="M:Nova.Common.Fleet.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising constructor to load a fleet from an XmlNode (save file).
            </summary>
            <param name="node">An XmlNode representing the fleet.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Fleet.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Return an XmlElement representation of the Fleet
            </summary>
            <param name="xmldoc">The parent xml document.</param>
            <returns>An XmlElement representation of the Fleet.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Global.InitializeXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Do some common setup work for creating a new xml document.
            </summary>
            <param name="xmldoc">An XmlDocument variable, may be null, which will be the new document.</param>
            <returns>An XmlElement that is the root node of xmldoc.</returns>
        </member>
        <member name="M:Nova.Common.Global.SaveData(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String)">
            <summary>Create an xml node for a save file.</summary>
            <param name="xmldoc">The XmlDocument data is being saved to.</param>
            <param name="parent">The element this data will be saved under.</param>
            <param name="tag">A name that describes the data, usually a variable name.</param>
            <param name="value">A String representation of the data, usually variable.ToString.</param>
        </member>
        <member name="M:Nova.Common.Global.EvaluateRelativePath(System.String,System.String)">
            <summary>Derive a relative path from two absolute paths.</summary>
            <param name="baseDir">The path from which the relative path will start.</param>
            <param name="targetPath">The absolute or relative path to be converted to a relative path.</param>
        </member>
        <member name="M:Nova.Common.Global.AddDirSeparator(System.String)">
            <summary>
            Add the local directory seperator character (\ or /) to a path, if required.
            </summary>
            <param name="path">A file path</param>
            <returns>path + the (local) directory seperater character added to the end, if required.</returns>
        </member>
        <member name="M:Nova.Common.Item.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default Construction
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Item.#ctor(Nova.Common.Item)">
            ----------------------------------------------------------------------------
            <summary>
            Copy (initialising) constructor
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.Item"/>.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Item.Key">
            <summary>
            Return a key for use in hash tables to locate items.
            </summary>
        </member>
        <member name="M:Nova.Common.Item.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising constructor from an XmlNode representing the Item (from a save file).
            </summary>
            <param name="node">An XmlNode representing the Item</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Item.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Return an XmlElement representation of the <see cref="T:Nova.Common.Item"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Property</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.DefenseProductionUnit">
            ----------------------------------------------------------------------------
            <summary>
            Class for constructing 1 defense unit.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.DefenseProductionUnit.#ctor(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="star">The <see cref="T:Nova.Common.Star"/> to create the defense on.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.DefenseProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Return true if this production item is to be skipped.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.DefenseProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            ??? (priority 6)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.DefenseProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Return the <see cref="T:Nova.Common.Resources"/> needed to build this defense.
            ??? (priority 6) - is this before or after some resources have already been spent?
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.EnabledValue">
            <summary>
            A type used by an EnabledCounter control.
            </summary>
        </member>
        <member name="M:Nova.Common.EnabledValue.#ctor(System.Boolean,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="check"></param>
            <param name="value"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.EnabledValue.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.EnvironmentTolerance">
            <summary>
            Class to hold environmental tolerance details
            </summary>
        </member>
        <member name="M:Nova.Common.EnvironmentTolerance.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor, required for serialization.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.EnvironmentTolerance.#ctor(System.Double,System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            
            </summary>
            <param name="minv"></param>
            <param name="maxv"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.EnvironmentTolerance.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">node is a "EnvironmentTolerance" <see cref="T:System.Xml.XmlNode"/> in 
            a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.EnvironmentTolerance.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this EnvironmentTolerance to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the EnvironmentTolerance</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.FactoryProductionUnit">
            <summary>
            Implementation of ProductionUnit for factory building.
            </summary>
        </member>
        <member name="M:Nova.Common.FactoryProductionUnit.#ctor(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor
            </summary>
            <param name="star">Star on which the factory is to be constructed</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.FactoryProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Returns true if this production item will be skipped.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.FactoryProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            Construct one factory.
            FIXME (priority 5) - doesn't account for partial construction.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.FactoryProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Returns the Resources needed to construct this factory.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.GameSettings.Restore">
            <summary>
            Restore the persistent data.
            </summary>
        </member>
        <member name="M:Nova.Common.GameSettings.Save">
            <summary>
            Save the console persistent data.
            </summary>
        </member>
        <member name="T:Nova.Common.Message">
            <summary>
            Player messages.
            </summary>
        </member>
        <member name="M:Nova.Common.Message.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Message.#ctor(System.String,System.Object,System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor
            </summary>
            <param name="audience">A string representing the destination of the message. Either a race name or and asterix.</param>
            <param name="messageEvent">An object used with the Goto button to display more information to the player. See Messages.GotoButton_Click</param>
            <param name="text">The text to display in the message box.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Message.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising constructor to read in a Star from an XmlNode (from a saved file).
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> representing a Star..
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Message.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this Message to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Message</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Minefield.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Minefield.Radius">
            ----------------------------------------------------------------------------
            <summary>
            Determine the spacial radius of a Minefield. 
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Minefield.Key">
            ----------------------------------------------------------------------------
            <summary>
            Override the Key method of Item
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.PrimaryTraits">
            <summary>
            <para>
            Primary racial trait (PRT) definitions/data. Each race has exactly one PRT.
            This data may be replaced by runtime loaded data in the future. Use AllTraits
            to access this data.
            </para>
            <para>
            The race costs are:
            <list type="table">
            <listheader><term>Trait</term><description>Cost</description></listheader>
            <item><term>Hyper-Expansion</term><description>63 pts.</description></item>
            <item><term>Super-Stealth</term><description>81 pts.</description></item>
            <item><term>War Monger</term><description>65 pts.</description></item>
            <item><term>Claim Adjuster</term><description>53 pts.</description></item>
            <item><term>Inner-Strength</term><description>17 pts.</description></item>
            <item><term>Space Demolition</term><description>0 pts.</description></item>
            <item><term>Packet Physics</term><description>90 pts.</description></item>
            <item><term>Inter-stellar Traveller</term><description>110 pts.</description></item>
            <item><term>Alternate Reality</term><description>80 pts.</description></item>
            <item><term>Jack of all Trades</term><description>28 pts.</description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Nova.Common.MineProductionUnit">
            <summary>
            Implementation of ProductionUnit for mine building.
            </summary>
        </member>
        <member name="M:Nova.Common.MineProductionUnit.#ctor(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="star">Star on which the mine is to be constructed</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.MineProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Return true if this item will be skipped in production.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.MineProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            Produce the mine.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.MineProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Returns the <see cref="T:Nova.Common.Resources"/> needed to build this Mine.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.IProductionUnit">
            <summary>
            Generic interface for any single production unit: 1 ship, 1 factory, 
            1 mine, 1% terraform, 1 alchemy and so on.
            The implementation should contain all the needed information 
            in order to perform actual construction (creating/changing game 
            objects).
            </summary>
        </member>
        <member name="M:Nova.Common.IProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Method which checks whether another one unit can be constructed.
            The unit cannot be constructed either because of lack 
            of minerals/resources or because of other game restrictions
            (for example another factory cannot be constructed if maximum
            factory number limit is reached).
            </summary>
            <returns>true in case unit can be constructed, false otherwise</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.IProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            Method which performs actual construction
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.IProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Return the resources needed to construct this unit.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceData.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Nova.Common.RaceData.IsEnememy(System.String)">
            <summary>
            Determine if this race wishes to treat lamb as an enemy.
            </summary>
            <param name="lamb">The name of the race who may be attacked.</param>
            <returns>true if lamb is one of this race's enemies, otherwise false.</returns>
        </member>
        <member name="M:Nova.Common.RaceData.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: constructor to load RaceData from an XmlNode representation.
            </summary>
            <param name="node">An XmlNode containing a RaceData representation (from a save file)</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceData.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Generate an XmlElement representation of the RaceData
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement reprsenting the RaceData (to be written to file)</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.RaceIcon">
            <summary>
            A race's icon image.
            </summary>
        </member>
        <member name="M:Nova.Common.RaceIcon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nova.Common.RaceIcon.#ctor(System.String,System.Drawing.Bitmap)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="source">The path and file name to the icon.</param>
            <param name="image">The loaded image.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceIcon.op_Increment(Nova.Common.RaceIcon)">
            ----------------------------------------------------------------------------
            <summary>
            Increment the current icon image.
            </summary>
            <param name="icon">The currently selected icon.</param>
            <returns>The next race icon in the AllRaceIcons collection.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceIcon.op_Decrement(Nova.Common.RaceIcon)">
            ----------------------------------------------------------------------------
            <summary>
            Decrement the current icon image.
            </summary>
            <param name="icon">The currently selected icon.</param>
            <returns>The previous icon in the AllRaceIcons collection.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceIcon.Clone">
            ----------------------------------------------------------------------------
            <summary>
            Return a clone of this object.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.RaceAvailability">
            <summary>
            Enumeration of the ways a given trait can affect the availability of a component.
            </summary>
        </member>
        <member name="T:Nova.Common.RaceRestriction">
            <summary>
            An object to represent the race/traits a component is restricted to/from.
            </summary>
        </member>
        <member name="M:Nova.Common.RaceRestriction.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nova.Common.RaceRestriction.#ctor(Nova.Common.RaceRestriction)">
            <summary>
            Copy Constructor
            </summary>
            <param name="existing">An existing <see cref="T:Nova.Common.RaceRestriction"/> to copy.</param>
        </member>
        <member name="M:Nova.Common.RaceRestriction.SetRestriction(System.String,Nova.Common.RaceAvailability)">
            ----------------------------------------------------------------------------
            <summary>
            Set the availability for a particular trait.
            </summary>
            <param name="trait">The trait to set the availability-affect of.</param>
            <param name="availability">The affect on availability of this trait.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceRestriction.Availability(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Get the affect on availability of the given trait.
            </summary>
            <param name="trait">A trait code.</param>
            <returns>The affect on availability of the trait as a <see cref="T:Nova.Common.RaceAvailability"/>.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceRestriction.ToString">
            ----------------------------------------------------------------------------
            <summary>
            Return a printable String representation of the restrictions.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceRestriction.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Initializes a new instance of the RaceRestriction class.
            Load a RaceRestriction from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> within 
            a Nova xml file.
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RaceRestriction.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this RaceRestriction to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the RaceRestriction.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Orders.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Orders.ToBinary(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Write out the orders file using binary serialization.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Orders.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Read in a set of orders.
            </summary>
            <param name="xmlnode">An <see cref="T:System.Xml.XmlNode"/> containing orders.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Orders.ToXml(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Write out the orders using xml format
            </summary>
            <param name="ordersFileName">The path and filename to save the orders too.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.PointUtilities">
            <summary>
            Point Utility Functions.
            </summary>
        </member>
        <member name="M:Nova.Common.PointUtilities.GetPositionInBox(System.Drawing.Rectangle,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Return a random position within a Rectangle. A border (which may be zero) is
            applied to the area where point positions will not be allocated. This
            ensures that returned points are never too close to the edge of the
            rectangle.
            </summary>
            <param name="box">A <see cref="T:System.Drawing.Rectangle"/> which will contain the point.</param>
            <param name="boxBorder">The minimum distance between the point and the edge of the box.</param>
            <returns>A <see cref="T:System.Drawing.Point"/> within the box.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.InBox(System.Drawing.Point,System.Drawing.Rectangle)">
            ----------------------------------------------------------------------------
            <summary>
            Determine if a point is within a bounding box. 
            </summary>
            <param name="p">The <see cref="T:System.Drawing.Point"/> in question.</param>
            <param name="box">The <see cref="T:System.Drawing.Rectangle"/> defining the space to check.</param>
            <returns>True if point p is in the box.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.CirclesOverlap(System.Drawing.Point,System.Drawing.Point,System.Double,System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Determine if two circles overlap.
            </summary>
            <remarks>
            For two circles (position x,y and radius r) x1,y1,r1 and x2,y2,r2, if:
            (x2-x1)^2+(y2-y1)^2 <!--<--> (r2+r1)^2
            Then the circles overlap. 
            </remarks>
            <param name="p1">Centre of the first circle.</param>
            <param name="p2">Centre of the second circle.</param>
            <param name="r1">Radius of the first circle.</param>
            <param name="r2">Radius of the second circle.</param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.IsNear(System.Drawing.Point,System.Drawing.Point)">
            ----------------------------------------------------------------------------
            <summary>
            Determine if two positions are "near".
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The second position.</param>
            <returns>true if position 2 is within a 40x40 box around position 1.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.Distance(System.Drawing.Point,System.Drawing.Point)">
            ----------------------------------------------------------------------------
            <summary>
            Calculate the distance between two points.
            </summary>
            <remarks>
            If comparing distances consider using DistanceSquare - it is much faster.
            </remarks>
            <param name="start">A point.</param>
            <param name="end">Another point.</param>
            <returns>Distance between the start and end points.</returns>
            TODO (priority 3) - Find calls to this function that could use DistanceSquare instead (for speed).
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.DistanceSquare(System.Drawing.Point,System.Drawing.Point)">
            ----------------------------------------------------------------------------
            <summary>
            Find the square of the distance between two points. 
            <para>
            This is much faster than finding the actual distance (as it avoids a sqare root calculation) and just as useful when making distance comparisons.
            </para>
            </summary>
            <param name="start">A point.</param>
            <param name="end">Another point.</param>
            <returns>The distance between start and end, squared.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.MoveTo(System.Drawing.Point,System.Drawing.Point,System.Double)">
            ----------------------------------------------------------------------------
            <summary>
            Move a position some distance nearer to another point.
            </summary>
            <remarks>
            FIXME (priority 6) - rounding can cause no movement to occur. 
            Fix added, requires testing - Dan 4 Apr 10
            </remarks>
            <param name="from">The stating <see cref="T:System.Drawing.Point"/></param>
            <param name="to">The destination <see cref="T:System.Drawing.Point"/></param>
            <param name="distance">The actual distance to move.</param>
            <returns>If the distance between from and to is less than 'distance' then returns 'to.
            Otherwise a point 'distance' away from 'from' in the direction of 'to'.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.PointUtilities.BattleMoveTo(System.Drawing.Point,System.Drawing.Point)">
            ----------------------------------------------------------------------------
            <summary>
            Move one square towards 'to' from 'from'.
            </summary>
            <remarks>
            Ships on the battle board always move one square at a time.
            </remarks>
            <param name="from">A starting position.</param>
            <param name="to">The destingation position.</param>
            <returns>A position 1 square closer to the destination (diagonal movement counts as 1).</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.ProductionQueue.Item">
            <summary>
            Details of a design in the queue.
            </summary>
        </member>
        <member name="M:Nova.Common.ProductionQueue.Item.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.Item.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Return the resources needed to 
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.Item.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Read in a ProductionQueue.Item from and XmlNode representation.
            </summary>
            <param name="node">An XmlNode containing a representation of a ProductionQueue.Item</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.Item.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Generate an XmlElement representation of the ProductionQueue.Item for saving.
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement representation of the ProductionQueue.Item</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Read in a ProductionQueue from an XmlElement representation
            </summary>
            <param name="node">A ProductionQueue XmlNode, normally read from a nova data file.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ProductionQueue.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Generate an XmlElement representation of the ProductionQueue to save to file.
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement representing the ProductionQueue</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Race">
            ----------------------------------------------------------------------------
            /// <summary>
            All of the race parameters
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.#ctor(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            constructor for Race. 
            Reads all the race data in from an xml formated save file.
            </summary>
            <param name="fileName">A nova save file containing a race.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.GetFactoryResources">
            ----------------------------------------------------------------------------
            <summary>
            Calculate the number of resources this race requires to construct a factory.
            </summary>
            <returns>The number of resources this race requires to construct a factory.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.GetMineResources">
            ----------------------------------------------------------------------------
            <summary>
            Calculate the number of resources this race requires to construct a mine.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.HasTrait(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Determine if this race has a given trait.
            </summary>
            <param name="trait">A string representing a primary or secondary trait. 
            See AllTraits.TraitKeys for examples.</param>
            <returns>true if this race has the given trait.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.Median(Nova.Common.EnvironmentTolerance)">
            ----------------------------------------------------------------------------
            <summary>
            Return the Median value of an integer range.
            </summary>
            <param name="tolerance">An <see cref="T:Nova.Common.EnvironmentTolerance"/> to determine the Median of.</param>
            <remarks>
            FIXME (priority 3) - Mathematically this finds the mean, which in some
            circumstances is different from the Median. 
            TODO (priority 3) - It would make more sense for this to be a member of EnvironmentTolerance
            or a general purpose method.
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Race.OptimumRadiationLevel">
            ----------------------------------------------------------------------------
            <summary>
            Return the optimum radiation level as a percentage for this race. This is
            simply the median value as radiation levels run from 0 to 100;
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Race.OptimumTemperatureLevel">
            ----------------------------------------------------------------------------
            <summary>
            Return the optimum temperature level as a percentage for this
            race. Temperature values range from -200 to + 200
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Race.OptimumGravityLevel">
            ----------------------------------------------------------------------------
            <summary>
            Return the optimum gravity level as a percentage for this race. Gravity
            values range from 0 to 10;
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Race.MaxPopulation">
            <summary>
            The maximum planetary population for this race.
            </summary>
        </member>
        <member name="M:Nova.Common.Race.GetStartingPopulation">
            <summary>
            Get the starting population for this race.
            </summary>
            <returns>The starting population.</returns>
            <remarks>
            TODO (priority 4) - Implement starting populations for races with two starting planets.
            </remarks>
        </member>
        <member name="M:Nova.Common.Race.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this Race to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Race</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Race.LoadRaceFromXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Load a Race from an xml document 
            </summary>
            <param name="xmldoc">produced using XmlDocument.Load(), see Race constructor</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.RacialTraits">
            <summary>
             Class to store and compare a Race's traits.
            </summary>
        </member>
        <member name="M:Nova.Common.RacialTraits.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RacialTraits.GetEnumerator">
            ----------------------------------------------------------------------------
            <summary>
            Loop through all of a races traits, starting with the primary trait.
            </summary>
            <returns>Each of the race's traits, begining with the PrimaryTrait, 
            followed by any lesser traits.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RacialTraits.Contains(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Check if the racial traits contains a particular trait.
            </summary>
            <param name="trait"></param>
            <returns>True if trait is the race's PrimaryTrait or a lesser trait.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.RacialTraits.Primary">
            ----------------------------------------------------------------------------
            <summary>
            Control access to the primary trait. It can be read as a public property. 
            It can be set using the SetPrimary() accessor function passing either a 
            TraitEntry or a String containing one of the primary trait codes.
            </summary>
            Design note: did not use a set method as I needed to overload depending on 
            whether a TraitEntry or a String is used to set the Primary racial trait.
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RacialTraits.SetPrimary(Nova.Common.TraitEntry)">
            ----------------------------------------------------------------------------
            <summary>
            Control access to the primary trait. It can be read as a public property. 
            It can be set using the SetPrimary() accessor function passing either a 
            TraitEntry or a String containing one of the primary trait codes.
            </summary>
            <param name="primaryTrait">The new primary trait.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.RacialTraits.SetPrimary(System.String)">
            ----------------------------------------------------------------------------
            <summary>
            Control access to the primary trait. It can be read as a public property. 
            It can be set using the SetPrimary() accessor function passing either a 
            TraitEntry or a String containing one of the primary trait codes.
            </summary>
            <param name="primaryTrait">The new primary trait.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Resources">
            <summary>
            Resource class. Individual resource values are either kT (minerals on hand)
            or percent (mineral concentrations).
            </summary>
        </member>
        <member name="M:Nova.Common.Resources.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            Default Constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising Constructor.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.#ctor(Nova.Common.Resources)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">object to copy</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.op_GreaterThanOrEqual(Nova.Common.Resources,Nova.Common.Resources)">
            ----------------------------------------------------------------------------
            <summary>
            See if a resource set is greater than another.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.op_LessThanOrEqual(Nova.Common.Resources,Nova.Common.Resources)">
            ----------------------------------------------------------------------------
            <summary>
            See if a resources set is less than another.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.op_Subtraction(Nova.Common.Resources,Nova.Common.Resources)">
            ----------------------------------------------------------------------------
            <summary>
            Subtract one resource set from another.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.op_Addition(Nova.Common.Resources,Nova.Common.Resources)">
            ----------------------------------------------------------------------------
            <summary>
            Add a resource set to another.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Resources.Mass">
            ----------------------------------------------------------------------------
            <summary>
            Return the mass of a resource set (Energy does not contribute to the mass).
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">node is a "resource" <see cref="T:System.Xml.XmlNode"/> in a Nova compenent definition file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Resources.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this Resources to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>Return an <see cref="T:System.Xml.XmlElement"/> representation of the resource cost.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Ship">
            <summary>
            Ship class. 
            </summary>
        </member>
        <member name="M:Nova.Common.Ship.#ctor(Nova.Common.Components.ShipDesign)">
            ----------------------------------------------------------------------------
            <summary>
            Create a ship of a specified design.
            </summary>
            <param name="shipDesign"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Ship.#ctor(Nova.Common.Ship)">
            ----------------------------------------------------------------------------
            <summary>
            Copy constructor. This is only used by the battle engine so only the fields
            used by it in creating stacks need to be copied.  Be careful when using the
            copy. It is a different object to the original.
            </summary>
            <param name="copy"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Ship.DesignUpdate(Nova.Common.Components.ShipDesign)">
            <summary>
            Replace the design of the ship
            </summary>
            <param name="design"></param>
        </member>
        <member name="M:Nova.Common.Ship.Update">
            <summary>
            Update the summary statistics for the ship
            </summary>
        </member>
        <member name="M:Nova.Common.Ship.FuelConsumption(System.Int32,Nova.Common.Race,System.Int32)">
             ----------------------------------------------------------------------------
             <summary>
             Calculate fuel consumption.
             </summary>
             <param name="warp">The speed the ship is travelling.</param>
             <param name="race">The race the ship belongs too.</param>
             <param name="cargoMass">The mass of any cargo carried (ship mass will be added automatically).</param>
             <returns>The ship fuel consumption rate in mg per year.</returns>
             <remarks>
             Ship_fuel_usage = ship_mass x efficiency x distance / 200
            
             As distance = speed * time, and we are setting time to 1 year, then we can
             just drop speed into the above equation and end up with mg per year. 
            
             If the secondary racial trait "improved fuel efficiency" is set then
             fuel consumption is 15% less than advertised.
             </remarks>
             ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.CanColonize">
            <summary>
            Checks if ship can colonize
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.BattleSpeed">
            <summary>
            The battle speed of a ship.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.BombCapability">
            ----------------------------------------------------------------------------
            <summary>
            Get total bomb capability. 
            </summary>
            <remarks>
            TODO (priority 6) Whatever code uses this seems to be ignoring smart bombs?
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.CanRefuel">
            <summary>
            Determine if this <see cref="T:Nova.Common.Ship"/> can refuel.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.CargoCapacity">
            <summary>
            The Cargo Capacity of the ship.
            Note the cargo carried is tracked by the <see cref="T:Nova.Common.Fleet"/>.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DesignArmor">
            <summary>
            The armor of the underlying ship's design.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DesignCost">
            <summary>
            The <see cref="T:Nova.Common.Resources"/> cost of the ship's underlying design.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DesignKey">
            <summary>
            The Key of the ship's underlying design.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DesignName">
            <summary>
            The name of the ship's underlying design.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DesignShield">
            <summary>
            The shield strength of the underlying design.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.DockCapacity">
            <summary>
            The maximum sized ship that can be produced.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.FuelCapacity">
            <summary>
            The fuel capacity of this ship.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.HasWeapons">
            ----------------------------------------------------------------------------
            <summary>
            Get if this ship has weapons.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.Image">
            <summary>
            The icon for this ship.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.IsBomber">
            ----------------------------------------------------------------------------
            <summary>
            Get if the ship is a bomber
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.IsStarbase">
            <summary>
            Determine if this <see cref="T:Nova.Common.Ship"/> is a starbase.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.MineCount">
            ----------------------------------------------------------------------------
            <summary>
            Get total mine laying capacity for this ship
            </summary>
            <remarks>
            TODO (priority 6) Client code must handle heavy and speed trap mines too.
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.PowerRating">
            ----------------------------------------------------------------------------
            <summary>
            Get the power rating of this ship - stub: TODO (priority 6)
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="P:Nova.Common.Ship.ScanRangeNormal">
            <summary>
            The range of the ship's normal scanners.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.ScanRangePenetrating">
            <summary>
            The range of the ship's penetrating scanners.
            </summary>
        </member>
        <member name="P:Nova.Common.Ship.Weapons">
            <summary>
            The ship's weapons.
            </summary>
        </member>
        <member name="M:Nova.Common.Ship.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising Constructor from an xml node.
            Precondition: node is a "Ship" node Nova save file (xml document).
            </summary>
            <param name="node">The XmlNode of the parent.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Ship.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Generate an xml representation of the ship for saving
            </summary>
            <param name="xmldoc">The master XmlDocument</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Star">
            <summary>
            Star Class
            </summary>
        </member>
        <member name="F:Nova.Common.Star.Colonists">
            <summary>
            The number of colonists as reported on a planet. Divide by GlobalDefinitions.ColonistsPerKiloton to convert to cargo units.
            </summary>
        </member>
        <member name="M:Nova.Common.Star.#ctor">
            ----------------------------------------------------------------------------
            <summary>
            default constructor
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.GetOperableFactories">
            ----------------------------------------------------------------------------
            <summary>
            Determine the number of factories that can be operated.
            </summary>
            <returns>the number of factories that can be operated</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.GetOperableMines">
            ----------------------------------------------------------------------------
            <summary>
            Calculate the number of mines that can be operated.
            </summary>
            <returns>the number of mines that can be operated</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.Capacity(Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Calculate the utilised capacity (as a percentage).
            </summary>
            <param name="race"></param>
            <returns>Capacity in the range 1 - 100 (%)</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.HabitalValue(Nova.Common.Race)">
             ----------------------------------------------------------------------------
             <summary>
             Calculate this star's Habitability for a given race.
             </summary>
             <param name="race">The race for which the Habitability is being determined.</param>
             <returns>The normalised habitability of this star (-1 to +1).</returns>
             <remarks>
             This algorithm is taken from the Stars! Technical FAQ:
             http://www.starsfaq.com/advfaq/contents.htm
            
             Return the habital value of this star for the specified race (in the range
             -1 to +1 where 1 = 100%). Note that the star environment values are
             percentages of the total range.
            
             The full equation (from the Stars! Technical FAQ) is: 
            
             Hab% = SQRT[(1-g)^2+(1-t)^2+(1-r)^2]*(1-x)*(1-y)*(1-z)/SQRT[3] 
            
             Where g, t,and r (stand for gravity, temperature, and radiation)are given
             by Clicks_from_center/Total_clicks_from_center_to_edge and where x,y, and z
             are:
            
             x=g-1/2 for g>1/2
             x=0 for g less than 1/2 
             y=t-1/2 for t>1/2
             y=0 for t less than 1/2 
             z=r-1/2 for r>1/2
             z=0 for r less than 1/2 
             </remarks>
             ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.Update(Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Update a star to take into account the passing of a year.
            </summary>
            <param name="race"></param>
            <remarks>
            FIXME (priority 4) why pass the race in? The race occupying this star system is this.ThisRace.
            
            Update a star to take into account the passing of a year.
            FIXME (priority 5) - this should not be here as it means the GUI has access to methods 
            that increase pop and resources - which is probably the source of the bug
            that causes this to happen when a star is clicked in the GUI.
            ... Turns out that bug was calling this function when it should not have been,
            still the above comment applies. Suggest refactor into ProcessTurn. - Dan 16 Jan 10
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.UpdatePopulation(Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Update the population of a star system.
            </summary>
            <param name="race"></param>
            <remarks>
            See Upadate()
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.UpdateResources(Nova.Common.Race)">
            ----------------------------------------------------------------------------
            <summary>
            Update the resources available to a star system.
            </summary>
            <param name="race"></param>
            <remarks>
            See Upadate()
            </remarks>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.Mine(System.Double@)">
             ----------------------------------------------------------------------------
             <summary>
             Mine minerals.
             </summary>
             <param name="concentration">The mineral concentraion in this system, (1.0 = 100%). 
             Mining alters the concentration of minerals.</param>
             <returns>The number of minerals mined.</returns>
             <remarks>
             Mining rate = Number of Mines * Efficiency * Mineral Concentration %.
            
             Mining efficiency is a race parameter (MineProductionRate per 10 mines)
             Concentration is in % and is normalised so that 1.0 = 100%
             </remarks>
             ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load: Initialising constructor to read in a Star from an XmlNode (from a saved file).
            </summary>
            <param name="node">An XmlNode representing a Star.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Star.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Create an XmlElement representation of the star for saving.
            </summary>
            <param name="xmldoc">The parent XmlDocument</param>
            <returns>An XmlElement representation of the star.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Intel.Clear">
            ----------------------------------------------------------------------------
            <summary>
            Reset all data structures.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.ScoreRecord">
            <summary>
            Keeps details of the data needed for the Score report
            </summary>
        </member>
        <member name="M:Nova.Common.ScoreRecord.CompareTo(System.Object)">
            ----------------------------------------------------------------------------
            <summary>
            Provide a sort by rank function
            </summary>
            <param name="rightHandSide"></param>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.SecondaryTraits">
            <summary>
            <para>
            Lesser racial trait (LRT) definitions/data. Each race can have several LRTs.
            This data may be replaced by runtime loaded data in the future. Use AllTraits
            to access this data.
            </para>
            <para>
            The cost per trait is (negative numbers mean that
            you gain those advantage points for selecting that trait):
            <list type="table">
            <listheader><term>Trait</term><description>Cost</description></listheader>
            <item><term>Improved Fuel Efficiency</term><description>78 pts.</description></item>
            <item><term>Total Terraforming</term><description>140 pts.</description></item>
            <item><term>Advanced Remote Mining</term><description>53 pts.</description></item>
            <item><term>Improved Starbases</term><description>67 pts.</description></item>
            <item><term>Generalized Research</term><description>-13 pts.</description></item>
            <item><term>Ultimate Recycling</term><description>80 pts.</description></item>
            <item><term>Mineral Alchemy</term><description>51 pts.</description></item>
            <item><term>Cheap Factories</term><description>58 pts.</description></item>
            <item><term>No Ram Scoop Engines</term><description>-53 pts.</description></item>
            <item><term>Cheap Engines</term><description>80 pts.</description></item>
            <item><term>Only Basic Remote Mining</term><description>-85 pts.</description></item>
            <item><term>No Advanced Scanners</term><description>-95 pts.</description></item>
            <item><term>Low Starting Population</term><description>-60 pts.</description></item>
            <item><term>Bleeding Edge Technology</term><description>-23 pts.</description></item>
            <item><term>Regenerating Shields</term><description>-10 pts.</description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Nova.Common.ShipProductionUnit">
            <summary>
            ShipProductionUnit class.
            </summary>
        </member>
        <member name="M:Nova.Common.ShipProductionUnit.#ctor(Nova.Common.Star,Nova.Common.Components.ShipDesign)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor.
            </summary>
            <param name="star">Star with this production queue.</param>
            <param name="shipDesign"><see cref="T:Nova.Common.Components.ShipDesign"/> to produce.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ShipProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Return true if production of this item will be skipped.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ShipProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            Construct the ship.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.ShipProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Return the resources needed for construction.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.TechLevel">
            <summary>
            TechLevels Class.
            </summary>
        </member>
        <member name="T:Nova.Common.TechLevel.ResearchField">
            <summary>
            Enumeration of the different fields of technical research.
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.#ctor(System.Int32)">
            <summary>
            Constructor setting all levels to a specified value
            </summary>
            <param name="level">Level to set all techs too.</param>
        </member>
        <member name="M:Nova.Common.TechLevel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor setting all levels to individual values.
            </summary>
            <param name="biotechnology">Level to set the biotechnology.</param>
            <param name="electronics">Level to set the electronics.</param>
            <param name="energy">Level to set the energy.</param>
            <param name="propulsion">Level to set the propulsion.</param>
            <param name="weapons">Level to set the weapons.</param>
            <param name="construction">Level to set the construction.</param>
        </member>
        <member name="M:Nova.Common.TechLevel.#ctor(Nova.Common.TechLevel)">
            <summary>
            Copy Constructor
            </summary>
            <param name="copy">object to copy</param>
        </member>
        <member name="M:Nova.Common.TechLevel.Clone">
            <summary>
            Provide a new TechLevel instance which is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nova.Common.TechLevel.Item(Nova.Common.TechLevel.ResearchField)">
            <summary>
            Index operator to allow array type indexing to a TechLevel.
            </summary>
            <param name="index">A TechLevel.ResearchField</param>
            <returns>The current tech level.</returns>
        </member>
        <member name="M:Nova.Common.TechLevel.GetEnumerator">
            <summary>
            Allow <c>foreach</c> to work with TechLevel.
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.op_GreaterThanOrEqual(Nova.Common.TechLevel,Nova.Common.TechLevel)">
            <summary>
            Return true if lhs >= rhs (for all fields).
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.op_GreaterThan(Nova.Common.TechLevel,Nova.Common.TechLevel)">
            <summary>
            Return true if lhs >= rhs for all fields and lhs > rhs for at least one field.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Nova.Common.TechLevel.op_LessThan(Nova.Common.TechLevel,Nova.Common.TechLevel)">
            <summary>
            return true if lhs &lt; rhs in any field.
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.op_LessThanOrEqual(Nova.Common.TechLevel,Nova.Common.TechLevel)">
            <summary>
            return true if lhs &lt; rhs in any field or lhs == rhs
            </summary>
        </member>
        <member name="M:Nova.Common.TechLevel.#ctor(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nova.Common.TechLevel.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this property to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Tech Level.</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.TerraformProductionUnit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nova.Common.TerraformProductionUnit.#ctor(Nova.Common.Star)">
            ----------------------------------------------------------------------------
            <summary>
            Initialising constructor
            </summary>
            <param name="star">The star that is producing this item</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TerraformProductionUnit.IsSkipped">
            ----------------------------------------------------------------------------
            <summary>
            Returns true if this production item is to be skipped this year.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TerraformProductionUnit.Construct">
            ----------------------------------------------------------------------------
            <summary>
            "Construct" a 1% terraform.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.TerraformProductionUnit.NeededResources">
            ----------------------------------------------------------------------------
            <summary>
            Return the Resources needed for this production item.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.Waypoint">
            <summary>
            Waypoints have a position (i.e. where to go), a destination description
            (e.g. a star name), a speed to go there and a task to do on arrival (e.g. 
            colonise).
            </summary>
        </member>
        <member name="M:Nova.Common.Waypoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nova.Common.Waypoint.#ctor(System.Xml.XmlNode)">
            ----------------------------------------------------------------------------
            <summary>
            Load from XML: Initialising constructor from an XML node.
            </summary>
            <param name="node">node is a "Waypoint" node Nova save file (xml document).
            </param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.Waypoint.ToXml(System.Xml.XmlDocument)">
            ----------------------------------------------------------------------------
            <summary>
            Save: Serialise this Waypoint to an <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="xmldoc">The parent <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representation of the Waypoint</returns>
            ----------------------------------------------------------------------------
        </member>
        <member name="T:Nova.Common.SpaceAllocator">
            ----------------------------------------------------------------------------
            <summary>
            SpaceAllocator chops up the available space into a number of boxes which
            can be given out one-by-one.
            </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.SpaceAllocator.#ctor(System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
            <para>Construction
            </para><para>
            Just determine the size of the grid we are going to need based
            on the number of items to place.
            </para><para>
            If the requested number of items does not naturally allow a square grid of
            boxes to be created (e.g. 2, 3, 5, etc. don't - 4, 9, etc. do) then the
            requested number is rounded up to a number that does.
            </para></summary>
            <param name="numberOfItems">The number of items to be distributed in the allocatable space.</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.SpaceAllocator.AllocateSpace(System.Int32)">
            ----------------------------------------------------------------------------
            <summary>
             Create the requested number of boxes. The boxes are stored as rectangles in
            the available list of boxes.
            </summary>
            <param name="spaceSize">The length of one side of the allocatable space (assumed to be a square).</param>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Nova.Common.SpaceAllocator.GetBox">
            ----------------------------------------------------------------------------
            <summary>
            Return one of the allocated boxes and remove the box from the list of
            available boxes.
            </summary>
            <returns></returns>
            ----------------------------------------------------------------------------
        </member>
    </members>
</doc>
